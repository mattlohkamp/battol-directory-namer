import { describe, expect, it } from "vitest";
import { stripEmoji } from "./utils";
// Generated by Qodo Gen

describe("stripEmoji", () => {
	// Remove single emoji from middle of string
	it("should remove emoji from middle of text string", () => {
		const input = "Hello 👋 World";
		const expected = "Hello  World";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle empty string input
	it("should return empty string when input is empty", () => {
		const input = "";
		const expected = "";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Remove multiple emojis from string
	it("should remove multiple emojis from a string", () => {
		const input = "Hello 👋 World 🌍!";
		const expected = "Hello  World !";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Remove consecutive emojis from string
	it("should remove consecutive emojis from string", () => {
		const input = "Hello 👋👋 World";
		const expected = "Hello  World";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Return original string when no emojis present
	it("should return the original string when no emojis are present", () => {
		const input = "Hello World";
		const expected = "Hello World";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle string with only emojis
	it("should return an empty string when input is only emojis", () => {
		const input = "👋😊🎉";
		const expected = "";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle string with emoji variants/modifiers
	it("should remove emoji variants and modifiers from the string", () => {
		const input = "Hello 👋🏽 World 🌍🌎🌏";
		const expected = "Hello  World ";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle string with unicode characters but no emojis
	it("should return the same string when there are no emojis", () => {
		const input = "Hello World こんにちは";
		const expected = "Hello World こんにちは";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle very long strings with many emojis
	it("should remove all emojis from a very long string", () => {
		const input =
			"😀".repeat(1000) +
			"This is a very long string with many emojis" +
			"😀".repeat(1000);
		const expected = "This is a very long string with many emojis";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle strings with surrogate pairs
	it("should remove emoji with surrogate pairs from text", () => {
		const input = "Hello 👨‍👩‍👧‍👦 World";
		const expected = "Hello  World";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle strings with emoji + ZWJ sequences
	it("should remove emoji and ZWJ sequences from the string", () => {
		const input = "👨‍👩‍👧‍👦 Family";
		const expected = " Family";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle strings with emoji sequences (e.g. family emojis)
	it("should remove family emoji sequences from text", () => {
		const input = "Family 👨‍👩‍👧‍👦 is important";
		const expected = "Family  is important";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle strings with regional indicators
	it("should remove regional indicator symbols from the string", () => {
		const input = "US🇺🇸 is different from CA🇨🇦";
		const expected = "US is different from CA";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});

	// Handle strings with emoji presentation selectors
	it("should remove emoji presentation selectors from string", () => {
		const input = "Hello\uFE0F World";
		const expected = "Hello World";

		const result = stripEmoji(input);

		expect(result).toBe(expected);
	});
});
